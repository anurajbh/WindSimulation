using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
public class WindSlider : MonoBehaviour
{
    public WindSettings windSettings;
    public Slider slider;
    void Start()
    {
        Debug.Log("Searching for wind settings");
        if(null == windSettings)
        {
            Debug.LogError("Wind Settings Scriptable Object not assigned to Slider");
        }
        Debug.Log("Searching for wind slider");
        slider = GetComponent<Slider>();
        if(null == slider)
        {
            Debug.LogWarning("No slider found. Creating one");
            EnsureCanvasAndSlider();
        }
        slider.value = windSettings.GetWindSpeed();
        slider.onValueChanged.AddListener(UpdateWindStrength);
    }

    void UpdateWindStrength(float value)
    {
        if (null == windSettings)
        {
            Debug.LogError("Wind Settings Scriptable Object missing in slider");
            return;
        }
        windSettings.SetWindSpeed(value);
    }
    void EnsureCanvasAndSlider()
    {
        Canvas canvas = FindObjectOfType<Canvas>();
        if (null == canvas)
        {
            Debug.Log("Missing Canvas! Creating one");
            canvas = CreateNewCanvas();
        }
        CreateSlider(canvas);
    }

    private void CreateSlider(Canvas canvas)
    {
        GameObject sliderObject = new GameObject("WindSlider");
        sliderObject.transform.SetParent(canvas.transform, false);

        Slider slider = sliderObject.AddComponent<Slider>();
        RectTransform rt = sliderObject.GetComponent<RectTransform>();
        rt.sizeDelta = new Vector2(200, 20);
        rt.anchoredPosition = new Vector2(0, -100);
    }

    private Canvas CreateNewCanvas()
    {
        GameObject canvasObject = new GameObject("AutoGeneratedCanvas");
        Canvas canvas = canvasObject.AddComponent<Canvas>();
        canvas.renderMode = RenderMode.ScreenSpaceOverlay;
        canvasObject.AddComponent<CanvasScaler>();
        canvasObject.AddComponent<GraphicRaycaster>();
        return canvas;
    }
}
